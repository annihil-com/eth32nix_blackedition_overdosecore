// ETH32nix - an Enemy Territory cheat for Linux
// Copyright (c) 2009 eth32 team
// www.nixcoders.org

#pragma once
#define MAX_SETTING_VALUES	25

typedef enum {
	SETTING_INT,
	SETTING_FLOAT,
	SETTING_BOOL,
	SETTING_VEC3,
	SETTING_VEC4,
	SETTING_BYTE3,
	SETTING_STRING,
	MAX_SETTINGS
} settingtype_t;

typedef struct settingvalue_s {
	float value;
	char *text;
} settingvalue_t;

typedef struct settingdef_s {
	char *name;
	char *defaultValue;
	settingtype_t type;
	void *target;
	char *description;
	float min, max;
	settingvalue_t values[MAX_SETTING_VALUES];
} settingdef_t;

 static const settingdef_t settingsDefs[] =
{
	// Name				Default			Type				Target
	//	Description
	//	Min / Max
	//	  Value				TextValue

	{ "aimmode",		"1",			SETTING_INT,		(void*)&eth32.settings.aimMode,
		"master aimbot mode",
		AIMMODE_OFF, AIMMODE_MAX-1,
		{
			{ (int)AIMMODE_OFF,		"off" },
			{ (int)AIMMODE_NORMAL,	"normal" },
			{ (int)AIMMODE_HUMAN, 	"human" },
		},
	},
	{ "locksensitivity", "true",		SETTING_BOOL,		(void*)&eth32.settings.lockSensitivity,
		"enable disable lockSensitivity",
	},
	{ "humanAimMode",	"1",			SETTING_INT,		(void*)&eth32.settings.humanAimType,
		"type of human aim to do",
		HUMAN_AIM_LUCKY, HUMAN_AIM_MAX-1,
		{
			{ (int)HUMAN_AIM_LUCKY,		"lucky" },
			{ (int)HUMAN_AIM_FULL, 		"full" },
		},
	},
	{ "humanvalue",	"0.500",			SETTING_FLOAT,		(void*)&eth32.settings.humanValue,
		"human aim value",
		0, 1,
	},
	{ "divmin",	"1",					SETTING_FLOAT,		(void*)&eth32.settings.divmin,
		"div min human aim value",
		0, 10,
	},
	{ "divmax",	"2",					SETTING_FLOAT,		(void*)&eth32.settings.divmax,
		"div max human aim value",
		0, 10,
	},
	{ "lockMouse",		"false",			SETTING_BOOL,		(void*)&eth32.settings.lockMouse,
		 "Should mouse get locked while shooting?",
	},
	{ "aimtype",		"1",			SETTING_INT,		(void*)&eth32.settings.aimType,
		"determines when the aimbot is to aim",
		AIM_OFF, AIM_MAX-1,
		{
			{ (int)AIM_OFF,		  	"off" },
			{ (int)AIM_ON_FIRE,	  	"onfire" },
			{ (int)AIM_ON_BUTTON, 	"onbutton" },
			{ (int)AIM_ALWAYS,	  	"always" },
			{ (int)AIM_TRIGGER,		"trigger" },
		},
	},
	{ "aimsort",		"1",			SETTING_INT,		(void*)&eth32.settings.aimSort,
		"sets type of sort to be used with valid targets",
		SORT_OFF, SORT_MAX-1,
		{
			{ (int)SORT_OFF,		"Off" },
			{ (int)SORT_CROSSHAIR,	"Crosshair" },
			{ (int)SORT_DISTANCE,	"Distance" },
			{ (int)SORT_ATTACKER,  	"attacker" },
			{ (int)SORT_KDRATIO,	"kdratio" },
			{ (int)SORT_ACCURACY,	"Accuracy" },
			{ (int)SORT_THREAT,		"threat" },

		},
	},
	{ "autofire",		"false",		SETTING_BOOL,		(void*)&eth32.settings.autofire,
		"aimbot will fire for you when target available\n   (note: autofire must be turned on per weapon as well)",
	},
	{ "locktarget",		"false",		SETTING_BOOL,		(void*)&eth32.settings.lockTarget,
		"once a target is aquired, aimbot will stay on this target while it remains visible",
	},
	{ "headbody",		"4",			SETTING_INT,		(void*)&eth32.settings.headbody,
		"determines if the aimbot uses the head or body and which order",
		0, AP_MAX-1,
		{
			{ (int)BODY_ONLY,		"bodyonly" },
			{ (int)HEAD_ONLY,		"headonly" },
			{ (int)BODY_HEAD,		"bodyfirst" },
			{ (int)HEAD_BODY,		"headfirst" },
			{ (int)HEAD_PRIORITY,	"headpriority" },
		},
	},
	{ "atkvalid",		"false",		SETTING_BOOL,		(void*)&eth32.settings.atkValidate,
		"inhibits firing, even manually, until a valid target is visible",
	},
	{ "antitk",			"false",		SETTING_BOOL,		(void*)&eth32.settings.antiTk,
		"returns fire to teamkillers",
	},
	{ "autodelay",			"true",		SETTING_BOOL,		(void*)&eth32.settings.autoDelay,
		"auto weapon delay",
	},
	{ "hitbox",			"1",			SETTING_INT,		(void*)&eth32.settings.hitboxType,
		"set the hitbox style to use for aimbot",
		HITBOX_OFF, HITBOX_MAX-1,
		{
			{ (int)HITBOX_ETMAIN,	"etmain" },
			{ (int)HITBOX_ETPRO,	"etpro" },
			{ (int)HITBOX_CUSTOM,	"custom" },
		},
	},
	{ "tracetype",		"2",			SETTING_INT,		(void*)&eth32.settings.traceType,
		"set the style of trace used to determine if a target is visible",
		0, TRACE_MAX-1,
		{
			{ (int)TRACE_CENTER,				"center" },
			{ (int)TRACE_CONTOUR,				"contour" },
			{ (int)TRACE_RANDOM_VOLUME,		    "randvolume" },
			{ (int)TRACE_RANDOM_SURFACE,		"randsurface" },
			{ (int)TRACE_CAPSULE_VOLUME,		"capvolume" },
			{ (int)TRACE_CAPSULE_SURFACE,		"capsurface" },
		},
	},
	{ "predtype",		"1",			SETTING_INT,		(void*)&eth32.settings.predictionType,
		"set the style of trace used to determine if a target is visible",
		0, PRED_MAX-1,
		{
			{ (int)PRED_OFF,		"Off" },
			{ (int)PRED_PING,		"Ping" },
			{ (int)PRED_MAN,		"Manual" },
		},
	},
	{ "grenadetracer", "true",	SETTING_BOOL,				(void*)&eth32.settings.grenadeTracer,
		"shows trajectory of the grenade",
	},
	{ "rifletracer", "false",	SETTING_BOOL,				(void*)&eth32.settings.rifleTracer,
		"shows trajectory of the rifle grenade",
	},
	{ "valgrentrajectory", 		"true",			SETTING_BOOL, 		(void*)&eth32.settings.valGrenTrajectory,
		"make additional calculations to make sure the grenade doesn't hit anything",
	},
	{ "valrifletrajectory", 	"true",			SETTING_BOOL, 		(void*)&eth32.settings.valRifleTrajectory,
		"make additional calculations to make sure the riflegrenade doesn't hit anything",
	},
	{ "fov",			"5.0",		SETTING_FLOAT,		(void*)&eth32.settings.fov,
		"set the field of vision that the aimbot can select targets from",
		0, 360,
	},
	{ "aimprotect",		"0",			SETTING_INT,		(void*)&eth32.settings.aimprotect,
		"turn off aimbot when people are watching",
		0, PROTECT_MAX-1,
		{
			{ (int)PROTECT_OFF,		"off" },
			{ (int)PROTECT_SPECS,	"specs" },
			{ (int)PROTECT_ALL,		"all" },
		},
	},
	{ "predbot",			"-0.050",		SETTING_FLOAT,		(void*)&eth32.settings.predbot,
		"set amount of prediction to be applied to (bot) targets",
		-1.0, 1.0,
	},
	{ "pred",			"-0.005",		SETTING_FLOAT,		(void*)&eth32.settings.pred,
		"set amount of prediction to be applied to (human) targets",
		-1.0, 1.0,
	},

	{ "headsize",	   	"10",	    		SETTING_FLOAT,		(void*)&eth32.settings.headBoxSize,
		"head hitbox size",
		1, 15,
	},
	{ "bodysize",			"25.5",			SETTING_FLOAT,		(void*)&eth32.settings.bodybox,
		"body hitbox size",
		0, 40,
	},
	{ "autovecz",		"true",			SETTING_BOOL,		(void*)&eth32.settings.autoVecZ,
		"auto vec Z calculation",
	},	
	{ "standX",		"0.5",				SETTING_FLOAT,		(void*)&eth32.settings.standX,
		"standing and running X vecs",
		-10.0, 10.0,
	},
	{ "standY",		"-0.2",				SETTING_FLOAT,		(void*)&eth32.settings.standY,
		"standing and running Y vecs",
		-10.0, 10.0,
	},
	{ "standlowZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.standlowZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "standmedZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.standmedZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "standfarZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.standfarZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	
	{ "runX",		"0.0",				SETTING_FLOAT,		(void*)&eth32.settings.runX,
		"standing and running X vecs",
		-10.0, 10.0,
	},
	{ "runY",		"0.0",				SETTING_FLOAT,		(void*)&eth32.settings.runY,
		"standing and running Y vecs",
		-10.0, 10.0,
	},
	{ "runlowZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.runlowZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "runmedZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.runmedZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	{ "runfarZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.runfarZ,
		"correction amount for Z vec, close range (standing and running)",
		-10.0, 10.0,
	},
	
	{ "crouchX",		"0.1",				SETTING_FLOAT,		(void*)&eth32.settings.crouchX,
		"crouching and crawling X vecs",
		-10.0, 10.0,
	},
	{ "crouchY",		"-0.3",				SETTING_FLOAT,		(void*)&eth32.settings.crouchY,
		"crouching and crawling Y vecs",
		-10.0, 10.0,
	},
	{ "crouchlowZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crouchlowZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crouchmedZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crouchmedZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crouchfarZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crouchfarZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	
	{ "crawlX",		"0.0",				SETTING_FLOAT,		(void*)&eth32.settings.crawlX,
		"crouching and crawling X vecs",
		-10.0, 10.0,
	},
	{ "crawlY",		"0.0",				SETTING_FLOAT,		(void*)&eth32.settings.crawlY,
		"crouching and crawling Y vecs",
		-10.0, 10.0,
	},
	{ "crawllowZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crawllowZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crawlmedZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crawlmedZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	{ "crawlfarZ",		"0.0",		SETTING_FLOAT,		(void*)&eth32.settings.crawlfarZ,
		"correction amount for Z vec, close range (crouching and crawling)",
		-10.0, 10.0,
	},
	
	{ "proneX",		"0.450",				SETTING_FLOAT,		(void*)&eth32.settings.proneX,
		"prone X vecs",
		-10.0, 10.0,
	},
	{ "proneY",		"-0.450",				SETTING_FLOAT,		(void*)&eth32.settings.proneY,
		"prone Y vecs",
		-10.0, 10.0,
	},
	{ "proneZ",		"6.800",			SETTING_FLOAT,		(void*)&eth32.settings.proneZ,
		"correction amount for Z vec, close range (prone)",
		-10.0, 10.0,
	},	
	{ "pointshead",	   	"10",	   			SETTING_INT,		(void*)&eth32.settings.pointshead,
		"autopoints for head",
		0, 64,
	},
	{ "pointsbody",	   		"64",	    		SETTING_INT,		(void*)&eth32.settings.pointsbody,
		"autopoints for body",
		0, 64,
	},
	{ "delayclose",	   	"0",	   		SETTING_INT,		(void*)&eth32.settings.delayClose,
		"weapon delay for close distance",
		0, 50,
	},
	{ "delaymed",	   	"11",	   		SETTING_INT,		(void*)&eth32.settings.delayMed,
		"weapon delay for close distance",
		0, 50,
	},
	{ "delayfar",	   		"16",	    		SETTING_INT,		(void*)&eth32.settings.delayFar,
		"weapon delay for far distance",
		0, 50,
	},
	{ "predself",		"-0.020",			SETTING_FLOAT,		(void*)&eth32.settings.predSelf,
		"set amount to prediction to applied to our own movement (only for manual)",
		-1, 1,
	},
	{ "predself_type",		"3",			SETTING_INT,		(void*)&eth32.settings.predSelfType,
		"set the type of self prediction to apply",
		0, SPR_MAX-1,
		{
			{ (int)SPR_OFF,		"off" },
			{ (int)SPR_MANUAL,	"Manual" },
			{ (int)SPR_PING,	"Ping" },
			{ (int)SPR_LEET,	"L337" },
		},
	},
	{ "dynamicHitbox",	"1.3",			SETTING_FLOAT,		(void*)&eth32.settings.dynamicHitboxScale,
		"set how much a hitbox will scale based on player movement",
		0, 5,
	},
	{ "predtargi",		"true",		SETTING_BOOL,		(void*)&eth32.settings.predTargzor,
		"target predict based on eth source code",
	},
	{ "hitsounds",		"false",		SETTING_BOOL,		(void*)&eth32.settings.hitsounds,
		"enable sounds when you do damage to another player",
	},
	{ "customsounds", "false",			SETTING_BOOL,		(void*)&eth32.settings.customSounds,
		"play custom sounds",
	},
	{ "hqsounds", 		"true",			SETTING_BOOL,		(void*)&eth32.settings.hqSounds,
		"play HQ sounds (like 'Dynamite Planted')",
	},
	{ "puresounds",		"false",		SETTING_BOOL,		(void*)&eth32.settings.pureSounds,
		"only play pure sounds, this will disable anoying custom voicechats",
	},
	{ "radarrange",		"3000.0",		SETTING_FLOAT,		(void*)&eth32.settings.radarRange,
		"set the range of the radar window",
		100, 10000,
	},
	{ "colorteam",		"0 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorTeam,
		"set the color of team chams",
	},
	{ "colorenemy",		"255 0 0",		SETTING_BYTE3,		(void*)eth32.settings.colorEnemy,
		"set the color of enemy chams",
	},
	{ "colorinvuln",		"255 255 0",		SETTING_BYTE3,		(void*)eth32.settings.colorInvulnerable,
		"set the color of player chams when they are invulnerable",
	},
	{ "headhitbox",		"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadHitbox,
		"enable head hitbox drawing",
	},
	{ "headaxes",		"false",		SETTING_BOOL,		(void*)&eth32.settings.drawHeadAxes,
		"enable hitbox axis drawing",
	},
	{ "bodyhitbox",		"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBodyHitbox,
		"enable body hitbox drawing",
	},
	{ "bulletrail",		"false",		SETTING_BOOL,		(void*)&eth32.settings.drawBulletRail,
		"enable bullet tracers",
	},
	{ "railwallhack",	"false",		SETTING_BOOL,		(void*)&eth32.settings.railWallhack,
		"see bullet tracers through walls",
	},
	{ "colorheadhb",	"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorHeadHitbox,
		"set the color of the head hitbox",
	},
	{ "colorbodyhb",	"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorBodyHitbox,
		"set the color of the body hitbox",
	},
	{ "colorbulletrail",	"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorBulletRail,
		"set the color of bullet tracers",
	},
	{ "colorxaxis",		"1 0 0",		SETTING_VEC3,		(void*)eth32.settings.colorXAxis,
		"set the color of hitbox x-axis",
	},
	{ "coloryaxis",		"0 1 0",		SETTING_VEC3,		(void*)eth32.settings.colorYAxis,
		"set the color of hitbox y-axis",
	},
	{ "colorzaxis",		"0 0 1",		SETTING_VEC3,		(void*)eth32.settings.colorZAxis,
		"set the color of hitbox z-axis",
	},
	{ "headhbtime",		"40",			SETTING_INT,		(void*)&eth32.settings.headRailTime,
		"set head hitbox stay time (in msec)",
		0, 1000,
	},
	{ "bodyhbtime",		"40",			SETTING_INT,		(void*)&eth32.settings.bodyRailTime,
		"set body hitbox stay time (in msec)",
		0, 1000,
	},
	{ "espname",		"true",			SETTING_BOOL,		(void*)&eth32.settings.espName,
		"display player names above their heads",
	},
	{ "wallhack",		"false",			SETTING_BOOL,		(void*)&eth32.settings.wallhack,
		"view players and items through walls",
	},
	{ "wallhackdist",	"1000.0",		SETTING_FLOAT,		(void*)&eth32.settings.wallhackDistance,
		"distance over which to enable wallhack for players",
		0, 10000,
	},
	{ "wallhackdist_enable", "false",   SETTING_BOOL,		(void*)&eth32.settings.doDistWallhack,
		"enable distance sensitive wallhack",
	},
	{ "blackout",		"false",		SETTING_BOOL,		(void*)&eth32.settings.blackout,
		"display the blackout around scoped weapons",
	},
	{ "removefoliage",		"true",		SETTING_BOOL,		(void*)&eth32.settings.removeFoliage,
		"completely removes the foliage (trees, bushes, etc)",
	},
	{ "autovote",			"false",		SETTING_BOOL,		(void*)&eth32.settings.autoVote,
		"enables autovoting (vote no) against vote kicks",
	},
	{ "weapzoom",		"true",			SETTING_BOOL,		(void*)&eth32.settings.weaponZoom,
		"toggle weapon zoom for scoped weapons",
	},
	{ "scopedspeed",	"1.0",			SETTING_FLOAT,		(void*)&eth32.settings.scopedTurnSpeed,
		"determines turning speed while scoped, (normal unscoped speed = 1.0)",
		0.1, 1.0,
	},
	{ "smoketransp",	"18",			SETTING_INT,		(void*)&eth32.settings.smoketrnsp,
		"set the transparency of smoke",
		0,	100,
	},
	{ "respawntimers",		"true",			SETTING_BOOL,		(void*)&eth32.settings.respawnTimers,
		"display enemy respawn times",
	},
	{ "autotapout",		"false",		SETTING_BOOL,		(void*)&eth32.settings.autoTapout,
		"when killed, auto-tapout and sends you instantly to the reinforcements queue",
	},
 	{ "speclist",		"true",			SETTING_BOOL,		(void*)&eth32.settings.getSpeclist,
		 "show who is spectating you",
 	},
	{ "etproOs",		"false",			SETTING_BOOL,		(void*)&eth32.settings.etproOs,
		"enable etpro os spoofing",
	},
	{ "pk3name",		"eth32_v5.pk3",SETTING_STRING,	(void*)eth32.settings.pk3file,
		"the main eth32 pk3 file name",
	},
	{ "etproGuid",		"00",			SETTING_STRING,		(void*)eth32.settings.etproGuid,
		"set your custom etpro GUID",
	},
	{ "jaymac",		"00",				SETTING_STRING,		(void*)eth32.settings.jayMac,
		"set your custom jaymod MAC address (prevents bans based on MAC)",
	},
	{ "autocrouch",		"false",		SETTING_BOOL,		(void*)&eth32.settings.autoCrouch,
		"enable auto crouching when target is visible",
	},
	{ "vw_origviewvalues",	"false",		SETTING_BOOL,		(void*)&eth32.settings.origViewValues,
		"enable unmodified view calculations",
	},
	{ "vw_interpolatedps",	"true",			SETTING_BOOL,		(void*)&eth32.settings.interpolatedPs,
		"enable interpolated playerstate",
	},
	{ "vw_damagefeedback",	"false",		SETTING_BOOL,		(void*)&eth32.settings.dmgFeedback,
		"enable damage feedback",
	},
	{ "preaim",		"false",		SETTING_BOOL,			(void*)&eth32.settings.preAim,
		"preaim targets",
	},
	{ "preaimtime",		"150.0",		SETTING_FLOAT,			(void*)&eth32.settings.preAimTime,
		"preaim time - higher is earlier aiming",
		0, 5000,
	},
	{ "preshoot",		"false",		SETTING_BOOL,			(void*)&eth32.settings.preShoot,
		"pre-shoot at targets before they are logically visible",
	},
	{ "preshoottime",		"50",			SETTING_FLOAT,		(void*)&eth32.settings.preShootTime,
		"preshoot time - higher means earlier shot (and higher chance of miss)",
		0, 5000,
	},
	{ "animcor", "1.200", SETTING_FLOAT, (void*)&eth32.settings.animCorrection,
		"animation correction for aimbot",
		-10.0, 10.0,
	},
 	// LINUX ONLY BELOW HERE!
	{ "hackvisuals", "true", SETTING_BOOL, (void*)&eth32.settings.drawHackVisuals,
		"draw hack visuals",
	},
 	{ "pbscreenshot", "2", SETTING_INT, (void*)&eth32.settings.pbScreenShot,
		"type of PB screenshot",
  		0, PB_SS_MAX-1,
		{
			{ (int)PB_SS_NORMAL,		"normal" },
			{ (int)PB_SS_CUSTOM,		"custom" },
			{ (int)PB_SS_BLACK,			"black" },
			{ (int)PB_SS_CLEAN,			"clean" },
		},
	},
	{ "bannerfmt", "^7Kills: ^2[k] ^0| ^7Accuracy: ^2[\\]^n% ^0| ^7Headshots: ^2[/] ^0| ^7Current Spree: ^2[S] ^0| ^7PBSS: ^2[s]", 								SETTING_STRING, 	(void*)eth32.settings.BannerFmt,
		"banner format",
	},
	{ "bannerscale", "1.1", SETTING_FLOAT, (void*)&eth32.settings.BannerScale,
		"Banner font scale",
	},
	{ "gui_banner", "true", SETTING_BOOL, (void*)&eth32.settings.guiBanner,
		"GUI: show stats banner",
	},
	{ "gui_chat", "false", SETTING_BOOL, (void*)&eth32.settings.guiChat,
		"GUI: show eth32 chat window",
	},
	{ "gui_orig", "true", SETTING_BOOL, (void*)&eth32.settings.guiOriginal,
		"GUI: use original ET hud",
	},
	{ "nudgehack",			"false",		SETTING_BOOL,		(void*)&eth32.settings.nudgeHack,
		"unprotects cl_timenudge cvar so it can be used in any server",
	},
	{ "namesteal", "false", SETTING_BOOL, (void*)&eth32.settings.doNamesteal,
		"Enable namestealing",
	},
	{ "namestealExact", 		"false", 		SETTING_BOOL, 		(void*)&eth32.settings.nsSmartMode,
		"Enables PB proof exact namestealing",
	},
	{ "namesteal_grace", 		"0", 			SETTING_INT, 		(void*)&eth32.settings.NamestealGrace,
		"Time to wait in ms to start stealing after joining a server",
		0, 20000,
	},
	{ "namesteal_mode", 		"2", 			SETTING_INT, 		(void*)&eth32.settings.NamestealMode,
		"Type of namestealing to do",
		0, NAMESTEAL_MAX-1,
		{
			{ (int)NAMESTEAL_TEAM,	"team" },
			{ (int)NAMESTEAL_ENEMY,	"enemy" },
			{ (int)NAMESTEAL_ALL,	"all" },
			{ (int)NAMESTEAL_FILE,	"file" },
		},
	},
	{ "namesteal_delay", 		"700", 			SETTING_INT, 		(void*)&eth32.settings.NamestealDelay,
		"Time to wait between changing names (in ms)",
		0, 20000,
	},
	{ "player_name", "true", SETTING_BOOL, (void*)&eth32.settings.espName,
	  "show player name"
	},
	{ "disguised", 		"true", SETTING_BOOL, (void *)&eth32.settings.drawDisguised,
		"draw disguised ESP on players",
	},
	{ "grenadedlight",	"false",		SETTING_BOOL,	(void*)&eth32.settings.grenadeDlight,
		"extra grenade lights inidicating blast area",
	},
	{ "mortardlight",	"false",		SETTING_BOOL,	(void*)&eth32.settings.mortarDlight,
		"extra mortar lights inidicating blast area",
	},
	{ "mortartrace",	"false",		SETTING_BOOL,	(void*)&eth32.settings.mortarTrace,
		"show mortar trace lines and impact ESP",
	},
	{ "artymarkers",	"false",		SETTING_BOOL,	(void*)&eth32.settings.artyMarkers,
		"show arty blast area lights and ESP",
	},
};
